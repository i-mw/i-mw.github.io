{"version":3,"sources":["App.js","registerServiceWorker.js","index.js","NetworkError.js","ExternalLoading.js"],"names":["LoadableBar","Loadable","loader","_","loading","props","error","NetworkError","placement","ExternalLoading","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","ReactDOM","render","BrowserRouter","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","className","style","display","position","zIndex","top","left","border","padding","width","height","backgroundColor","float","marginRight","animationDelay","animationDuration","animationDirection"],"mappings":"mPAsBA,IAAMA,EAAcC,IAAS,CACzBC,OAAQ,SAAAC,GAAC,OAAI,oDACbC,QAlBJ,SAAiBC,GACb,OAAGA,EAAMC,MAED,6BACI,kBAACC,EAAA,EAAD,CAAcC,UAAU,yBACxB,kBAACD,EAAA,EAAD,CAAcC,UAAU,yBAM5B,kBAACC,EAAA,EAAD,SAgBGC,MANf,SAAaL,GACT,OACI,kBAACL,EAAD,OCnBFW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAA1B,GACLwB,QAAQxB,MAAM,4CAA6CA,MCxEjE2B,IAASC,OAAO,kBAACC,EAAA,EAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SDajE,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,aAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,aAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCxCxBkC,I,+BCRA,oBAae7C,IAVf,SAAsBF,GACpB,OACE,uBAAGgD,UAAWhD,EAAMG,WAApB,2C,+BCLJ,oBAkCeC,IA3Bf,SAAyBJ,GACvB,OACE,yBAAKgD,UAAU,WAAWC,MAAO,CAACC,QAAS,eAAgBC,SAAU,WACnEC,OAAQ,EAAGC,IAAK,mBAAoBC,KAAM,qBAC1C,yBAAKN,UAAU,UAAUC,MAAO,CAACM,OAAQ,EAAGC,QAAS,IACnD,yBAAKR,UAAU,UAAUC,MAAO,CAACQ,MAAO,OAAQC,OAAQ,SACtD,yBAAKV,UAAU,cACVC,MAAO,CAACQ,MAAO,OAAQC,OAAQ,OACvBC,gBAAiB,mBAAoBC,MAAO,OAC5CC,YAAa,MAAOC,eAAgB,QACpCC,kBAAmB,KAAMC,mBAAoB,YAC1D,yBAAKhB,UAAU,cACVC,MAAO,CAACQ,MAAO,OAAQC,OAAQ,OAC/BC,gBAAiB,mBAAoBC,MAAO,OAC5CC,YAAa,MAAOC,eAAgB,SACpCC,kBAAmB,KAAMC,mBAAoB,YAClD,yBAAKhB,UAAU,cACVC,MAAO,CAACQ,MAAO,OAAQC,OAAQ,OAC/BC,gBAAiB,mBAAoBC,MAAO,OAC5CC,YAAa,IAAKC,eAAgB,KAClCC,kBAAmB,KAAMC,mBAAoB,kB","file":"static/js/main.f16a58bc.chunk.js","sourcesContent":["import React from 'react';\nimport Loadable from 'react-loadable';\nimport './App.css';\nimport ExternalLoading from './ExternalLoading';\nimport NetworkError from './NetworkError';\n\nfunction Loading(props) {\n    if(props.error) {\n        return (\n            <div>\n                <NetworkError placement=\"network-error-inline\"/>\n                <NetworkError placement=\"network-error-fixed\"/>\n            </div>\n        )\n    }\n    else {\n        return (\n            <ExternalLoading/>\n        )\n    }\n}\n\nconst LoadableBar = Loadable({\n    loader: _ => import('./Application'),\n    loading: Loading\n});\n\nfunction App(props) {\n    return (\n        <LoadableBar/>\n    )\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\nregisterServiceWorker();\n","import React from 'react';\nimport propTypes from 'prop-types'\n\nfunction NetworkError(props) {\n  return (\n    <p className={props.placement}>Network error! Check your connection.</p>\n  )\n}\n\nNetworkError.propTypes = {\n  placement: propTypes.string.isRequired\n}\n\nexport default NetworkError;","import React from 'react';\n\n/* This component and icon is absolutely designed and aligned\n   And corresponds to loading a whole page, not an element in a page\n   - for an element in page check InternalLoading component\n*/\n\nfunction ExternalLoading(props) {\n  return (\n    <div className=\"wrap-out\" style={{display: \"inline-block\", position: \"absolute\",\n      zIndex: 1, top: \"calc(50% - 12px)\", left: \"calc(50% - 26px)\"}}>\n      <div className=\"wrap-in\" style={{border: 0, padding: 0}}>\n        <div className=\"loading\" style={{width: \"52px\", height: \"12px\"}}>\n          <div className=\"ld ld-blink\"\n               style={{width: \"12px\", height: \"12px\",\n                       backgroundColor: \"rgb(67, 84, 114)\", float: \"left\",\n                       marginRight: \"8px\", animationDelay: \"-0.7s\",\n                       animationDuration: \"2s\", animationDirection: \"normal\"}}></div>\n          <div className=\"ld ld-blink\"\n               style={{width: \"12px\", height: \"12px\",\n               backgroundColor: \"rgb(67, 84, 114)\", float: \"left\",\n               marginRight: \"8px\", animationDelay: \"-0.35s\",\n               animationDuration: \"2s\", animationDirection: \"normal\"}}></div>\n          <div className=\"ld ld-blink\"\n               style={{width: \"12px\", height: \"12px\",\n               backgroundColor: \"rgb(67, 84, 114)\", float: \"left\",\n               marginRight: \"0\", animationDelay: \"0s\",\n               animationDuration: \"2s\", animationDirection: \"normal\"}}></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ExternalLoading;"],"sourceRoot":""}